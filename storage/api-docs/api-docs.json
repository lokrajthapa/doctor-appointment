{
    "openapi": "3.0.0",
    "info": {
        "title": "Laravel v11 API",
        "version": "1.0.0"
    },
    "paths": {
        "/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate user and generate token",
                "description": "Login a user and return a token along with user details",
                "operationId": "d2d429751d33564f29616ec2be2e37d6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "lokraj@gmail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "example": "token_string"
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 6
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "user@example.com"
                                                },
                                                "user_type": {
                                                    "type": "string",
                                                    "example": "patient"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "status": {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Patient Login successfully"
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "example": "success"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "type": {
                                            "type": "string",
                                            "example": "error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout user",
                "description": "Logout the authenticated user and delete the access token",
                "operationId": "44a7d85c70e2f604dfc31e5b0aa5af85",
                "responses": {
                    "200": {
                        "description": "Successful logout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User logout successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "description": "Register a user by providing their name, email, role, and password.",
                "operationId": "573de1fed352c1205a32c4d1b9877375",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "role",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "johndoe@example.com"
                                    },
                                    "role": {
                                        "type": "string",
                                        "example": "patient"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User Created Successfully"
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "johndoe@example.com"
                                                },
                                                "user_type": {
                                                    "type": "string",
                                                    "example": "patient"
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "example": "2024-08-26T12:34:56.000000Z"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "example": "2024-08-26T12:34:56.000000Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "properties": {
                                                "name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The name field is required."
                                                    }
                                                },
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email has already been taken."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password confirmation does not match."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/patients": {
            "get": {
                "tags": [
                    "Patients"
                ],
                "summary": "Get all patients",
                "description": "Retrieve a list of all patients.",
                "operationId": "4a397b69598fdd620ee7120b8610185b",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Patient"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Patients"
                ],
                "summary": "Create a new patient",
                "description": "Store a newly created patient in the database.",
                "operationId": "d81c0f99b503153ba6d47c7899a882a4",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StorePatientRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Patient created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Patient"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/patients/{id}": {
            "get": {
                "tags": [
                    "Patients"
                ],
                "summary": "Get a specific patient",
                "description": "Retrieve a specific patient by its ID.",
                "operationId": "0feecbcd5339fb70ce3f9af002812b77",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Patient"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Patient not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Patients"
                ],
                "summary": "Update a specific patient",
                "description": "Update the details of an existing patient.",
                "operationId": "6b907428b808fd0fbcc6268f9ab634ba",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StorePatientRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Patient updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Patient"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Patient not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Patients"
                ],
                "summary": "Delete a specific patient",
                "description": "Delete a patient by its ID.",
                "operationId": "2a1632c6f39f39a43a35f002e573e3d1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Patient deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Patient deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Patient not found"
                    }
                }
            }
        },
        "/api/schedules": {
            "get": {
                "tags": [
                    "Schedules"
                ],
                "summary": "Get all schedules",
                "description": "Retrieve a list of all schedules associated with the authenticated doctor.",
                "operationId": "c2791edf6c0550c67fac652cad98e09e",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Schedule"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Schedules"
                ],
                "summary": "Create a new schedule",
                "description": "Store a newly created schedule in the database.",
                "operationId": "cec681726db3f091faae4410db8ee14c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "doctor_id",
                                    "date",
                                    "start_time",
                                    "end_time"
                                ],
                                "properties": {
                                    "doctor_id": {
                                        "description": "ID of the doctor",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "date": {
                                        "description": "Date of the schedule",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-08-26"
                                    },
                                    "start_time": {
                                        "description": "Start time of the schedule",
                                        "type": "string",
                                        "format": "time",
                                        "example": "09:00"
                                    },
                                    "end_time": {
                                        "description": "End time of the schedule",
                                        "type": "string",
                                        "format": "time",
                                        "example": "12:00"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Schedule created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/schedules/{id}": {
            "get": {
                "tags": [
                    "Schedules"
                ],
                "summary": "Get a specific schedule",
                "description": "Retrieve a specific schedule by its ID.",
                "operationId": "da250e6293de88a6bb2201d3d53ebe82",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Schedule not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Schedules"
                ],
                "summary": "Update a specific schedule",
                "description": "Update the details of an existing schedule.",
                "operationId": "4c279651026a64cbbce8be66901a368a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Schedule"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Schedule updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Schedule not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Schedules"
                ],
                "summary": "Delete a specific schedule",
                "description": "Delete a schedule by its ID.",
                "operationId": "0c464af4e687525872f4eb274eac5d7c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Schedule deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Schedule not found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Patient": {
                "title": "Patient",
                "description": "A patient model",
                "required": [
                    "id",
                    "user_id",
                    "dob",
                    "gender",
                    "phone"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier of the patient",
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "The ID of the user associated with the patient",
                        "type": "integer"
                    },
                    "dob": {
                        "description": "The date of birth of the patient",
                        "type": "string",
                        "format": "date"
                    },
                    "gender": {
                        "description": "The gender of the patient",
                        "type": "string",
                        "enum": [
                            "male",
                            "female",
                            "other"
                        ]
                    },
                    "phone": {
                        "description": "The phone number of the patient",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StorePatientRequest": {
                "title": "Store Patient Request",
                "description": "Schema for storing a patient",
                "required": [
                    "user_id",
                    "dob",
                    "gender",
                    "phone"
                ],
                "properties": {
                    "user_id": {
                        "description": "The ID of the user associated with the patient",
                        "type": "integer"
                    },
                    "dob": {
                        "description": "The date of birth of the patient",
                        "type": "string",
                        "format": "date"
                    },
                    "gender": {
                        "description": "The gender of the patient",
                        "type": "string",
                        "enum": [
                            "male",
                            "female",
                            "other"
                        ]
                    },
                    "phone": {
                        "description": "The phone number of the patient",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Schedule": {
                "title": "Schedule",
                "description": "A schedule model",
                "required": [
                    "id",
                    "doctor_id",
                    "date",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier of the schedule",
                        "type": "integer"
                    },
                    "doctor_id": {
                        "description": "The ID of the doctor associated with the schedule",
                        "type": "integer"
                    },
                    "date": {
                        "description": "The date of the schedule",
                        "type": "string",
                        "format": "date"
                    },
                    "start_time": {
                        "description": "The start time of the schedule",
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "description": "The end time of the schedule",
                        "type": "string",
                        "format": "time"
                    }
                },
                "type": "object"
            },
            "StoreScheduleRequest": {
                "title": "Store Schedule Request",
                "description": "Schema for storing a schedule",
                "required": [
                    "doctor_id",
                    "date",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "doctor_id": {
                        "description": "The ID of the doctor associated with the schedule",
                        "type": "integer"
                    },
                    "date": {
                        "description": "The date of the schedule",
                        "type": "string",
                        "format": "date"
                    },
                    "start_time": {
                        "description": "The start time of the schedule",
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "description": "The end time of the schedule",
                        "type": "string",
                        "format": "time"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Enter your bearer token in the format: `Bearer {token}`",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "Patients",
            "description": "Patients"
        },
        {
            "name": "Schedules",
            "description": "Schedules"
        }
    ]
}